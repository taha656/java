/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.esprit.TFTpro.gui;
import com.esprit.TFTpro.adpaters.MatcheAdapter;
import com.esprit.TFTpro.adpaters.MatcheAdapter2;

import com.esprit.TFTpro.dao.classes.MatcheDAO;
import com.esprit.hellopi.dao.interfaces.ImatcheDAO;
import com.esprit.TFTpro.entities.Matche;
import com.esprit.technique.DataSource;
import java.awt.TextField;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;


/**
 *
 * @author Hama
 */
public class Affecterarbitre extends javax.swing.JFrame {

    /**
     * Creates new form ListmatchFrame
     */
       private Connection connection;
static ResultSet res;
    private Object nom;
      TextField JTextField;
    int y=0;
    int x;
      public String recuperermailticket1(String email)
    {
        
        meyel2.setText(email);
        return email; 
        
    }
    public Affecterarbitre() {
        initComponents();
         x=0;
        connection= DataSource.getInstance().getConnection();
        
        
      
        
        
        
        
        
        
        
        
        
             
               
             
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableaffichermatch = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        niveauarbitre = new javax.swing.JLabel();
        affecterarbitre = new javax.swing.JComboBox<>();
        affecterarbitr = new javax.swing.JToggleButton();
        dcnx = new javax.swing.JButton();
        meyel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        email = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableaffichermatch.setModel(new MatcheAdapter());
        tableaffichermatch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableaffichermatchMouseClicked(evt);
            }
        });
        tableaffichermatch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableaffichermatchKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tableaffichermatch);

        jLabel12.setText("La liste des arbitres ");

        affecterarbitre.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                affecterarbitreItemStateChanged(evt);
            }
        });

        affecterarbitr.setText("Affecter");
        affecterarbitr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                affecterarbitrActionPerformed(evt);
            }
        });

        dcnx.setText("Se d√©connecter");
        dcnx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dcnxActionPerformed(evt);
            }
        });

        jLabel6.setText("Welcome ");

        jLabel7.setText("jLabel7");

        email.setText("jLabel8");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(meyel2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel12)
                                                .addGap(31, 31, 31))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(affecterarbitre, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(172, 172, 172)
                                                .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(1, 1, 1)
                                                .addComponent(niveauarbitre, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(24, 24, 24)
                                        .addComponent(dcnx))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(196, 196, 196)
                                .addComponent(affecterarbitr, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(346, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(meyel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel12)
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(affecterarbitre, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(email)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dcnx)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(niveauarbitre, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(affecterarbitr, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private void tableaffichermatchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableaffichermatchMouseClicked
        // TODO add your handling code here:
         MatcheAdapter sa = new MatcheAdapter();

          int x = tableaffichermatch.getSelectedRow();
  String id = sa.getValueAt(x, 0).toString();
  
  //lMatchId.setText(id);

 // int id = Integer.parseInt(sa.getValueAt(x, 0).toString());
    String nomjoueur1 = sa.getValueAt(x, 1).toString();
        System.out.println(nomjoueur1);
    String Resultat = sa.getValueAt(x, 4).toString();


    String type = sa.getValueAt(x, 4).toString();

      //  typematch_ajout.setSelectedItem(type);
        
    //  nomjoueur1_ajout.addItem(type);
        
        
int ecraser1= tableaffichermatch.getSelectedRow();
int selectedRow = tableaffichermatch.getSelectedRow();
 
niveauarbitre.setText(tableaffichermatch.getValueAt(selectedRow, 4).toString());

                         
  
System.out.println(niveauarbitre.getText());            

  String sqlaffecterarbitre=" Select nom from utilisateur where role='hhhh' "; 
  affecterarbitre.removeAllItems();

        
        if (niveauarbitre.getText().equals("amateur") )
           {


               sqlaffecterarbitre="Select nom from utilisateur where role='arbitre' AND competencearbitre='amateur'    "; 
         

           }
        
        else if (niveauarbitre.getText().equals("professionel"))
           {

        
               sqlaffecterarbitre="Select nom from utilisateur where role='arbitre' AND competencearbitre='professionel'    "; 
           

               
               
           }

             try { 
 PreparedStatement psaffecterarbitre=connection.prepareStatement(sqlaffecterarbitre);
        
            ResultSet resaffecterarbitre= psaffecterarbitre.executeQuery();

            while(resaffecterarbitre.next() )
            {
  affecterarbitre.addItem(resaffecterarbitre.getString("nom"));  
                                    
            }
            
            
            
            
              }
              catch (SQLException ex) {
            Logger.getLogger(MatcheDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        
              
                  

               
             
             
             
             
             
             
             
             
             //////////////////////////////////////////
            
             
             
             
             
             
                          
   
        
             
        
    }//GEN-LAST:event_tableaffichermatchMouseClicked

    private void affecterarbitreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_affecterarbitreItemStateChanged
        // TODO add your handling code here:
    //    affecterarbitre.removeAllItems();

    }//GEN-LAST:event_affecterarbitreItemStateChanged

    private void affecterarbitrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_affecterarbitrActionPerformed
        // TODO add your handling code here:
    
        
        DataSource.getInstance();
        ImatcheDAO dao=new MatcheDAO();
        Matche matche= new Matche();
int selectedRow = tableaffichermatch.getSelectedRow();



String nom=affecterarbitre.getSelectedItem().toString();            
String stade= tableaffichermatch.getValueAt(selectedRow,3).toString();
String joueur1= tableaffichermatch.getValueAt(selectedRow,1).toString();
String joueur2= tableaffichermatch.getValueAt(selectedRow,2).toString();
        
        matche.setIdmatche(Integer.parseInt(tableaffichermatch.getValueAt(selectedRow,0).toString()));
        matche.setNomarbitre(nom);

  
        dao.affecterarbitre(matche);
 
            tableaffichermatch.setModel(new MatcheAdapter2());

    //recuperer mail de l'arbitre
    

       jLabel7.setText(nom);
    
    

        
               String sqlrecuperermail="Select email from utilisateur where nom like '%"+nom+"%' "; 


               
        try { 
 PreparedStatement psaffecterarbitre=connection.prepareStatement(sqlrecuperermail);
        
            ResultSet resaffecterarbitre= psaffecterarbitre.executeQuery();
            
                        while(resaffecterarbitre.next() )
                        {

            email.setText(resaffecterarbitre.getString("email"));
                        }
  //email.setText(resaffecterarbitre.getString("email"));  
               
              }
              catch (SQLException ex) {
            Logger.getLogger(MatcheDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        String destinataire;
        
        
        destinataire = email.getText();
        

 try {
            Properties prop = new Properties();
           
            
            prop.put("mail.smtp.auth", "true");
        prop.put("mail.smtp.starttls.enable", "true");
        prop.put("mail.smtp.host", "smtp.gmail.com");
        prop.put("mail.smtp.port", "587");
        prop.put("mail.smtp.ssl.trust", "smtp.gmail.com");

        
            
            
            Session sess = Session.getDefaultInstance(prop,
                    new javax.mail.Authenticator() {
                        
                        protected PasswordAuthentication getPasswordAuthentication() {
                            return new PasswordAuthentication("federationtunisiennedetunis@gmail.com", "darajinho");
                            //eli bech tabaath bih
                        }
                    }
            );
            
            
            Message myMsg = new MimeMessage(sess);
            myMsg.setFrom(new InternetAddress());
            myMsg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(destinataire));
            
//lchkoun bech tabaath
            myMsg.setSubject("Affectation du match");
            myMsg.setText("Bonjour monsieur  "+nom+" je vous informe que vous etes affecter a un match qui se d√©roule entre le joueur  "+joueur1+"  et le joueur  "+joueur2+"   dans le stade  "+stade);
            Transport.send(myMsg);
            
            
            
            
             
            
            
            
            
// TODO add your handling code here:
        } catch (MessagingException ex) {
            Logger.getLogger(Affecterarbitre.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
        
        
        
        
        

        
    }//GEN-LAST:event_affecterarbitrActionPerformed

    private void tableaffichermatchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableaffichermatchKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableaffichermatchKeyPressed
   public String genCod(String email)
    {
        
        meyel2.setText(email);
        return email;
        
        
    }
   
    private void dcnxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dcnxActionPerformed
        // TODO add your handling code here:
       Connect l =new  Connect();
        this.setVisible(false);
        l.setVisible(true);
    }//GEN-LAST:event_dcnxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Affecterarbitre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Affecterarbitre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Affecterarbitre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Affecterarbitre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Affecterarbitre().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton affecterarbitr;
    private javax.swing.JComboBox<String> affecterarbitre;
    private javax.swing.JButton dcnx;
    private javax.swing.JLabel email;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel meyel2;
    private javax.swing.JLabel niveauarbitre;
    private javax.swing.JTable tableaffichermatch;
    // End of variables declaration//GEN-END:variables
}
